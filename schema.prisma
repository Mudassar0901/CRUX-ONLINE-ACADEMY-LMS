generator client { provider = "prisma-client-js" }
datasource db { provider = "postgresql"; url = env("DATABASE_URL") }

model Tenant { id String @id @default(cuid()); name String; locale String @default("en-GB"); currency String @default("GBP"); createdAt DateTime @default(now()); users User[]; leads Lead[]; courses Course[] }
model User   { id String @id @default(cuid()); tenantId String; email String @unique; name String; role String; locale String? @default("en-GB"); timezone String? @default("Europe/London"); createdAt DateTime @default(now()); Tenant Tenant @relation(fields: [tenantId], references: [id]); Tutor Tutor?; Parent Parent?; Student Student? }
model Tutor  { id String @id @default(cuid()); userId String @unique; subjects String; boards String; rate Float @default(0); kycStatus String @default("PENDING"); User User @relation(fields: [userId], references: [id]); Timesheets Timesheet[] }
model Parent { id String @id @default(cuid()); userId String @unique; User User @relation(fields: [userId], references: [id]); Students Student[]; Invoices Invoice[] }
model Student{ id String @id @default(cuid()); userId String @unique; parentId String?; school String?; grade String?; goalsJson String?; User User @relation(fields: [userId], references: [id]); Parent Parent? @relation(fields: [parentId], references: [id]); Enrolments Enrolment[] }
model Course { id String @id @default(cuid()); tenantId String; subject String; board String; level String; syllabus String?; Tenant Tenant @relation(fields: [tenantId], references: [id]); Classes Class[] }
model Class  { id String @id @default(cuid()); courseId String; tutorId String; type String; capacity Int @default(1); startAt DateTime; endAt DateTime; recurrence String?; room String?; Course Course @relation(fields: [courseId], references: [id]); Tutor Tutor @relation(fields: [tutorId], references: [id]); Enrolments Enrolment[] }
model Enrolment { id String @id @default(cuid()); classId String; studentId String; status String @default("ACTIVE"); joinedAt DateTime @default(now()); Class Class @relation(fields: [classId], references: [id]); Student Student @relation(fields: [studentId], references: [id]) }
model Attendance { id String @id @default(cuid()); classId String; studentId String; status String; minutes Int; source String; notes String?; Class Class @relation(fields: [classId], references: [id]); Student Student @relation(fields: [studentId], references: [id]) }
model Lead { id String @id @default(cuid()); tenantId String; name String; contact String; subject String; country String; source String; status String; ownerId String?; createdAt DateTime @default(now()); Tenant Tenant @relation(fields: [tenantId], references: [id]) }
model Invoice { id String @id @default(cuid()); parentId String; amount Float; currency String; status String; periodFrom DateTime; periodTo DateTime; pdfUrl String?; Parent Parent @relation(fields: [parentId], references: [id]) }
model Timesheet { id String @id @default(cuid()); tutorId String; classId String; minutes Int; approved Boolean @default(false); Tutor Tutor @relation(fields: [tutorId], references: [id]); Class Class @relation(fields: [classId], references: [id]) }